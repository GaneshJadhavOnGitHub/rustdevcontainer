/*
# Tested on Jan29, 2025 - Working 
# Author : Ganesh K Jadhav
# Date : January 23 to January 29, 2025.
# Version : 1.0.0
# Description : Rust-devcontainer for rust programming.
*/
{
    // Name for the dev container, this name displays in the UI.
    "name": "rust-devcontainer",
	//Specify compose file to be used.
    "dockerComposeFile": "./docker-compose.yml",
	//Primary service (Service to work with VS_Code)- 
    //Main entry point for VS Code to connect to the container and provides IDE. 
    "service": "rust",
    //Start following services when the container starts.
    "runServices": [
		"rust"
	],
    //Specify workspace folder for primary service(container).
    "workspaceFolder": "/user/workspace",
    // Bind mount the parent directory (..) to /user/workspace inside the container.
    // This ensures that the project/program files remain on the host system, allowing 
    // changes made inside the container to be reflected outside and vice versa.
    // It also ensures that files persist even after the container is stopped or removed.
    "mounts": [
        "source=..,target=/user/workspace,type=bind" 
      ],
    //Stop container/containers when we close VS CODE.
    "shutdownAction": "stopCompose",
    
    // Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			"settings": { 
                // Specify path of lldb executable. Usefull for debugging.
				"lldb.executable": "/usr/bin/lldb",
				// VS Code don't watch files under ./target.
				"files.watcherExclude": {
					"**/target/**": true
				},
                /*Commented out for devlopment purpose can be uncommented later for ensuring best practices 
                and "check" option should be commented.*/
                //Configures Rust Analyzer to run the clippy linter upon saving a Rust file. 
                //This helps identify potential style issues and best practices.
				//"rust-analyzer.checkOnSave.command": "clippy",
                
                //Configures Rust Analyzer to run the cargo check upon saving a Rust file. 
                "rust-analyzer.checkOnSave.command": "check",
               
                // Tell rust-analyzer where to find the Rust standard library, 
                // which is essential for code analysis and features like autocompletion.

                // Find rustup home and default toolchain by using 'rustup show'.
                // the toolchains are present inside 'toolchains' folder which is present inside rustup home folder.
                // here rustup home is /root/.rustup 
                // and default toolchain is  stable-x86_64-unknown-linux-gnu. So the path : 
                //"rust-analyzer.sysroot": "/root/.rustup/toolchains/stable-x86_64-unknown-linux-gnu" ,
                
                // Tell rust-analyzer to automatically discover the Rust sysroot.
                "rust-analyzer.sysroot": "discover" ,
                // End of line character is set to `\n`, which is the Unix-style line ending used by macOS and Linux.
                // This may not align with the Windows default (`\r\n`).
                "files.eol": "\n",

                //Adjust the timeout period (in milliseconds) for code actions that are triggered automatically when saving a file.
                //'code actions on save' can include features like automatic formatting, code fixes, and refactoring suggestions.
                // Set to 2 seconds.
                "editor.codeActionsOnSaveTimeout": 2000,
                "editor.quickSuggestions": {
                //Disable quick suggestions within comments.
                "comments": false,
                //Enable quick suggestions within strings (e.g., suggestions for string manipulation, completions, etc.).
                "strings": true,
                //Enable quick suggestions in other contexts, such as variable names, function calls, and more.
                "other": true
                },
                // rust-analyzer specific settings to configure cargo behavior
                

                // Enable rust-analyzer to load the output directories generated by `cargo check`,
                // which includes the target directories and any other files produced by the check process.
                // This helps rust-analyzer better understand the build context and provide more accurate code analysis
                // by incorporating information from all the crates and their output directories when running `cargo check`.
                // This can be especially useful in large projects or workspaces with multiple crates.
                "rust-analyzer.cargo.loadOutDirsFromCheck": true,

                // Tell rust-analyzer to consider all features of the crate.
                "rust-analyzer.cargo.allFeatures": true,

                // Ensures rust-analyzer runs checks on all targets when saving a file.
                "rust-analyzer.checkOnSave.allTargets": true

		    }
	  },
      // Specifies port mapping for communication between host (8000) and containers (8001).
      "forwardPorts":["8000:8001"]
    }
}